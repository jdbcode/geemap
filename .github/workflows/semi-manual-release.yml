name: Semi-Manual Release

on:
  workflow_dispatch:
    inputs:
      release_branch:
        description: 'Release branch name (e.g., release/v0.36.5)'
        required: true
        type: string
      version:
        description: 'Version number (e.g., 0.36.5 or 0.36.5rc1)'
        required: true
        type: string
      create_pr:
        description: 'Create a pull request (recommended for testing)'
        required: false
        type: boolean
        default: true
      publish_release:
        description: 'Publish a GitHub Release (only if create_pr is false)'
        required: false
        type: boolean
        default: false
      prerelease:
        description: 'Mark as prerelease (only applies to GitHub Release)'
        required: false
        type: boolean
        default: false
      release_notes:
        description: 'Release notes (optional, for GitHub Release)'
        required: false
        type: string
        default: ''

jobs:
  prepare-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.REPO_WRITE_TOKEN || secrets.GITHUB_TOKEN }}
          fetch-depth: 0
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
      
      - name: Compute branch name
        id: branch
        run: |
          BRANCH_NAME="${{ github.event.inputs.release_branch }}"
          echo "branch_name=${BRANCH_NAME}" >> $GITHUB_OUTPUT
          echo "Branch to create: ${BRANCH_NAME}"
      
      - name: Create release branch from master
        run: |
          git fetch origin master
          git checkout -b ${{ steps.branch.outputs.branch_name }} origin/master
          echo "Created branch ${{ steps.branch.outputs.branch_name }} from origin/master"
      
      - name: Bump version
        run: |
          python scripts/bump_geemap_version.py ${{ github.event.inputs.version }}
      
      - name: Show git diff
        run: |
          echo "Changes made by version bump:"
          git --no-pager diff
      
      - name: Commit and push changes
        run: |
          git add pyproject.toml geemap/__init__.py
          git commit -m "Bump version to ${{ github.event.inputs.version }}"
          git push origin ${{ steps.branch.outputs.branch_name }}
      
      - name: Create Pull Request
        if: ${{ github.event.inputs.create_pr == 'true' }}
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.REPO_WRITE_TOKEN || secrets.GITHUB_TOKEN }}
          branch: ${{ steps.branch.outputs.branch_name }}
          base: master
          title: "Release ${{ github.event.inputs.version }}"
          body: |
            ## Release ${{ github.event.inputs.version }}
            
            This PR prepares the release for version ${{ github.event.inputs.version }}.
            
            ### Changes
            - Updated version in `pyproject.toml` (2 places)
            - Updated `__version__` in `geemap/__init__.py`
            
            ### Checklist
            - [ ] Review version changes
            - [ ] Verify tests pass
            - [ ] Update CHANGELOG.md (if applicable)
            - [ ] Merge this PR to master
            - [ ] Create a release tag
            
            ---
            *This PR was created by the Semi-Manual Release workflow.*
      
      - name: Create Tag and Release
        if: ${{ github.event.inputs.create_pr == 'false' && github.event.inputs.publish_release == 'true' }}
        env:
          GH_TOKEN: ${{ secrets.REPO_WRITE_TOKEN || secrets.GITHUB_TOKEN }}
        run: |
          VERSION="${{ github.event.inputs.version }}"
          TAG="v${VERSION}"
          
          # Create and push tag
          git tag -a "${TAG}" -m "Release ${VERSION}"
          git push origin "${TAG}"
          
          # Create GitHub Release
          RELEASE_NOTES="${{ github.event.inputs.release_notes }}"
          if [ -z "${RELEASE_NOTES}" ]; then
            RELEASE_NOTES="Release ${VERSION}"
          fi
          
          PRERELEASE_FLAG=""
          if [ "${{ github.event.inputs.prerelease }}" = "true" ]; then
            PRERELEASE_FLAG="--prerelease"
          fi
          
          gh release create "${TAG}" \
            --title "Release ${VERSION}" \
            --notes "${RELEASE_NOTES}" \
            ${PRERELEASE_FLAG}
          
          echo "Created release ${TAG}"
